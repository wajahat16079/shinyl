paste0("<b><font color='green'>Embossers</font></b>: ", mapDf$embossers))
Line7 = ifelse(is.na(mapDf$clover),
paste0("<b><font color='red'>Clovers</font></b>: NA"),
paste0("<b><font color='green'>Clovers</font></b>: ", mapDf$clover))
Line8 = ifelse(is.na(mapDf$eurobraille),
paste0("<b><font color='red'>Eurobraille</font></b>: NA"),
paste0("<b><font color='green'>Eurobraille</font></b>: ", mapDf$eurobraille))
Line9 = ifelse(is.na(mapDf$notes),
paste0("<b><font color='red'>Notes</font></b>: NA"),
paste0("<b><font color='blue'>Notes</font></b>: ", mapDf$notes))
pointLabels <- paste(sep = "<br/>",
Line0,
Line1,
Line2,
# Line3,
# Line4,
Line5,
Line6,
Line7,
Line8,
Line9
)%>%
lapply(htmltools::HTML)
leaflet(mapDf) %>%
addTiles() %>%
addMarkers(lng=~lon, lat=~lat,popup= pointLabels,label= pointLabels)%>%
addCircleMarkers(lng=~lon, lat=~lat,popup= pointLabels,
color = ~store_type_col,
label= pointLabels,
radius = 5)
##  Map
output$myMap <- renderLeaflet({
req(RV$df)
df = RV$df
# df = getCleanData(read_excel("Dealer Contacts.xlsx", sheet = "Dealer Territories", skip = 0))
# mapDf = df %>% filter(State == "NY")
names(df)
df$store_type[is.na(df$store_type)] = "Not Defined"
df$store_type_col = NA
df$store_type_col[df$store_type == "Not Defined"] = "black"
df$store_type_col[df$store_type == "store"] = "blue"
df$store_type_col[df$store_type == "satellite"] = "red"
mapDf = df
Line0 = paste0("<b>State</b>: ", mapDf$state_1)
Line1 = paste0("<b>Store Type</b>: ", mapDf$store_type)
Line2 = paste0("<b>Dealer</b>: ", mapDf$dealer)
Line5 = ifelse(is.na(mapDf$rehan),
paste0("<b><font color='red'>Rehan</font></b>: NA"),
paste0("<b><font color='green'>Rehan</font></b>: ", mapDf$rehan))
Line6 = ifelse(is.na(mapDf$embossers),
paste0("<b><font color='red'>Embossers</font></b>: NA"),
paste0("<b><font color='green'>Embossers</font></b>: ", mapDf$embossers))
Line7 = ifelse(is.na(mapDf$clover),
paste0("<b><font color='red'>Clovers</font></b>: NA"),
paste0("<b><font color='green'>Clovers</font></b>: ", mapDf$clover))
Line8 = ifelse(is.na(mapDf$eurobraille),
paste0("<b><font color='red'>Eurobraille</font></b>: NA"),
paste0("<b><font color='green'>Eurobraille</font></b>: ", mapDf$eurobraille))
Line9 = ifelse(is.na(mapDf$notes),
paste0("<b><font color='red'>Notes</font></b>: NA"),
paste0("<b><font color='blue'>Notes</font></b>: ", mapDf$notes))
pointLabels <- paste(sep = "<br/>",
Line0,
Line1,
Line2,
# Line3,
# Line4,
Line5,
Line6,
Line7,
Line8,
Line9
)%>%
lapply(htmltools::HTML)
leaflet(mapDf) %>%
addTiles() %>%
addMarkers(lng=~lon, lat=~lat,popup= pointLabels,label= pointLabels)%>%
addCircleMarkers(lng=~lon, lat=~lat,popup= pointLabels,
color = ~store_type_col,
label= pointLabels,
radius = 5)
#
# Map = leaflet(options = leafletOptions(zoomControl = FALSE)) %>%
#   addTiles() %>%
#   addPolygons(data = mv,
#               # fillColor = statePal(mv@data$ColorGroup),
#               fillColor = colors,
#               # fillOpacity = 0.01,
#               # color = "black",
#               stroke = T,
#               # weight = 0.02,
#               weight = 2,
#               opacity = 1,
#               color = "white",
#               dashArray = "3",
#               fillOpacity = 0.3,
#               label = labels,
#               popup =  (labels),
#               options = popupOptions(closeButton = FALSE),
#               # label = htmlEscape(labels),
#               layerId = mv@data$ADM1_EN)
#
# Map
})
df$store_type[is.na(df$store_type)] = "Not Defined"
df$store_type_col = NA
df$store_type_col[df$store_type == "Not Defined"] = "black"
df$store_type_col[df$store_type == "store"] = "blue"
df$store_type_col[df$store_type == "satellite"] = "red"
df$store_type_radius= NA
df$store_type_radius[df$store_type == "Not Defined"] = 5
df$store_type_radius[df$store_type == "store"] = 10
df$store_type_radius[df$store_type == "satellite"] = 15
mapDf = df
Line0 = paste0("<b>State</b>: ", mapDf$state_1)
Line1 = paste0("<b>Store Type</b>: ", mapDf$store_type)
Line2 = paste0("<b>Dealer</b>: ", mapDf$dealer)
Line5 = ifelse(is.na(mapDf$rehan),
paste0("<b><font color='red'>Rehan</font></b>: NA"),
paste0("<b><font color='green'>Rehan</font></b>: ", mapDf$rehan))
Line6 = ifelse(is.na(mapDf$embossers),
paste0("<b><font color='red'>Embossers</font></b>: NA"),
paste0("<b><font color='green'>Embossers</font></b>: ", mapDf$embossers))
Line7 = ifelse(is.na(mapDf$clover),
paste0("<b><font color='red'>Clovers</font></b>: NA"),
paste0("<b><font color='green'>Clovers</font></b>: ", mapDf$clover))
Line8 = ifelse(is.na(mapDf$eurobraille),
paste0("<b><font color='red'>Eurobraille</font></b>: NA"),
paste0("<b><font color='green'>Eurobraille</font></b>: ", mapDf$eurobraille))
Line9 = ifelse(is.na(mapDf$notes),
paste0("<b><font color='red'>Notes</font></b>: NA"),
paste0("<b><font color='blue'>Notes</font></b>: ", mapDf$notes))
pointLabels <- paste(sep = "<br/>",
Line0,
Line1,
Line2,
# Line3,
# Line4,
Line5,
Line6,
Line7,
Line8,
Line9
)%>%
lapply(htmltools::HTML)
leaflet(mapDf) %>%
addTiles() %>%
addMarkers(lng=~lon, lat=~lat,popup= pointLabels,label= pointLabels)%>%
addCircleMarkers(lng=~lon, lat=~lat,popup= pointLabels,
color = ~store_type_col,
label= pointLabels,
radius = 5)
leaflet(mapDf) %>%
addTiles() %>%
addMarkers(lng=~lon, lat=~lat,popup= pointLabels,label= pointLabels)%>%
addCircleMarkers(lng=~lon, lat=~lat,popup= pointLabels,
color = ~store_type_col,
label= pointLabels,
radius = ~store_type_radius)
df$store_type_radius[df$store_type == "Not Defined"] = 5
df$store_type_radius[df$store_type == "store"] = 7.5
df$store_type_radius[df$store_type == "satellite"] = 10
mapDf = df
Line0 = paste0("<b>State</b>: ", mapDf$state_1)
Line1 = paste0("<b>Store Type</b>: ", mapDf$store_type)
Line2 = paste0("<b>Dealer</b>: ", mapDf$dealer)
Line5 = ifelse(is.na(mapDf$rehan),
paste0("<b><font color='red'>Rehan</font></b>: NA"),
paste0("<b><font color='green'>Rehan</font></b>: ", mapDf$rehan))
Line6 = ifelse(is.na(mapDf$embossers),
paste0("<b><font color='red'>Embossers</font></b>: NA"),
paste0("<b><font color='green'>Embossers</font></b>: ", mapDf$embossers))
Line7 = ifelse(is.na(mapDf$clover),
paste0("<b><font color='red'>Clovers</font></b>: NA"),
paste0("<b><font color='green'>Clovers</font></b>: ", mapDf$clover))
Line8 = ifelse(is.na(mapDf$eurobraille),
paste0("<b><font color='red'>Eurobraille</font></b>: NA"),
paste0("<b><font color='green'>Eurobraille</font></b>: ", mapDf$eurobraille))
Line9 = ifelse(is.na(mapDf$notes),
paste0("<b><font color='red'>Notes</font></b>: NA"),
paste0("<b><font color='blue'>Notes</font></b>: ", mapDf$notes))
pointLabels <- paste(sep = "<br/>",
Line0,
Line1,
Line2,
# Line3,
# Line4,
Line5,
Line6,
Line7,
Line8,
Line9
)%>%
lapply(htmltools::HTML)
leaflet(mapDf) %>%
addTiles() %>%
addMarkers(lng=~lon, lat=~lat,popup= pointLabels,label= pointLabels)%>%
addCircleMarkers(lng=~lon, lat=~lat,popup= pointLabels,
color = ~store_type_col,
label= pointLabels,
radius = ~store_type_radius)
leaflet(mapDf) %>%
addTiles() %>%
addMarkers(lng=~lon, lat=~lat,popup= pointLabels,label= pointLabels)%>%
addCircleMarkers(lng=~lon, lat=~lat,popup= pointLabels,
color = ~store_type_col,
label= pointLabels,
fill = F,
radius = ~store_type_radius)
leaflet(mapDf) %>%
addTiles() %>%
addMarkers(lng=~lon, lat=~lat,popup= pointLabels,label= pointLabels)%>%
addCircleMarkers(lng=~lon, lat=~lat,popup= pointLabels,
color = ~store_type_col,
label= pointLabels,
fill = F,
opacity = 1,
radius = ~store_type_radius)
leaflet(mapDf) %>%
addTiles() %>%
addMarkers(lng=~lon, lat=~lat,popup= pointLabels,label= pointLabels)%>%
addCircleMarkers(lng=~lon, lat=~lat,popup= pointLabels,
color = ~store_type_col,
label= pointLabels,
fill = F,
opacity = 1,
weight = 1,
radius = ~store_type_radius)
leaflet(mapDf) %>%
addTiles() %>%
addMarkers(lng=~lon, lat=~lat,popup= pointLabels,label= pointLabels)%>%
addCircleMarkers(lng=~lon, lat=~lat,popup= pointLabels,
color = ~store_type_col,
label= pointLabels,
fill = F,
opacity = 1,
weight = 2,
radius = ~store_type_radius)
# mapDf = df %>% filter(State == "NY")
unique(df$zip_codes)
# mapDf = df %>% filter(State == "NY")
unique(df$zip_codes) %>% length()
# Function to add a small random offset to coordinates
add_random_offset <- function(coordinate) {
offset <- runif(1, -0.001, 0.001) # Adjust the range as needed
return(coordinate + offset)
}
# Function to add a small random offset to coordinates
add_random_offset <- function(coordinate) {
offset <- runif(length(coordinate), -0.001, 0.001) # Adjust the range as needed
return(coordinate + offset)
}
runApp()
runApp()
runApp()
runApp()
runApp()
names(df)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
names(df)
runApp()
runApp()
input$product
input$product
input$product
runApp()
input$product
mapDf = df %>%
filter(state_1 %in% input$state) %>%
filter(store_type %in% input$store_type) %>%
filter(input$product %in% input$status)
input$status
runApp()
mapDf = df %>%
filter(state_1 %in% input$state) %>%
filter(store_type %in% input$store_type) %>%
filter(input$product %in% input$status)
input$product
input$status
df %>%
filter(state_1 %in% input$state) %>%
filter(store_type %in% input$store_type) %>%
filter(input$product %in% input$status)
df %>%
filter(state_1 %in% input$state) %>%
filter(store_type %in% input$store_type)
mapDf = df %>%
filter(state_1 %in% input$state) %>%
filter(store_type %in% input$store_type)
mapDf = df %>%
filter(state_1 %in% input$state) %>%
filter(store_type %in% input$store_type) %>%
filter(get(input$product) %in% input$status)
mapDf = df %>%
filter(state_1 %in% input$state) %>%
filter(store_type %in% input$store_type) %>%
filter({input$product)} %in% input$status)
input$product
input$status
mapDf = df %>%
filter(state_1 %in% input$state) %>%
filter(store_type %in% input$store_type)
mapDf1 = mapDf[mapDf[[input$product]] %in% input$status,]
mapDf[[input$product]]
mapDf1 = mapDf[mapDf[input$product] %in% input$status,]
mapDf = df %>%
filter(state_1 %in% input$state) %>%
filter(store_type %in% input$store_type) %>%
filter( tolower(input$product) %in% input$status)
tolower(input$product)
mapDf = df %>%
filter(state_1 %in% input$state) %>%
filter(store_type %in% input$store_type) %>%
# filter( "tolower(input$product)" %in% input$status)
filter( "rehan" %in% input$status)
names(df)
mapDf = df %>%
filter(state_1 %in% input$state) %>%
filter(store_type %in% input$store_type) %>%
# filter( "tolower(input$product)" %in% input$status)
filter( rehan %in% input$status)
mapDf = df %>%
filter(state_1 %in% input$state) %>%
filter(store_type %in% input$store_type) %>%
filter(tolower(input$product) %in% input$status)
mapDf = df %>%
filter(state_1 %in% input$state) %>%
filter(store_type %in% input$store_type) %>%
filter(get(tolower(input$product)) %in% input$status)
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
df = read_excel("Dealer Contacts.xlsx (2)", sheet = "Dealer Territories", skip = 0)
getwd()
df = read_excel("Dealer Contacts (2).xlsx", sheet = "Dealer Territories", skip = 0)
df = clean_names(df)
df = df[!is.na(df$dealer),]
# df$lat  = parse_number(df$lat)
# df$lon  = parse_number(df$lon)
df$lat  = dms_to_decimal(df$lat)
df$lon  = dms_to_decimal(df$lon)
View(df)
df = read_excel("Dealer Contacts (2).xlsx", sheet = "Dealer Territories", skip = 0)
df = clean_names(df)
df = df[!is.na(df$dealer),]
dms_to_decimal(df$lat)
dms_to_decimal(df$lon)
df$lon
names(df)
# df$lat  = parse_number(df$lat)
# df$lon  = parse_number(df$lon)
names(df)[names(df) == "long"] = "lon"
dms_to_decimal(df$lon)
df$lat  = dms_to_decimal(df$lat)
df$lon  = dms_to_decimal(df$lon)
names(df)
latLong = geocode_zip(df$zip_codes)
names(latLong)[1] = "zip_codes"
names(latLong)[1] = "zip_codes"
names(latLong)[2] = "latitude"
names(latLong)[3] = "longitude"
latLong$zip_codes = as.numeric(latLong$zip_codes)
unique(df$zip_codes)
dealers = df %>% left_join(latLong, by = "zip_codes")
dealers$lat[is.na(dealers$lat)] = dealers$latitude[is.na(dealers$lat)]
dealers$lon[is.na(dealers$lon)] = dealers$longitude[is.na(dealers$lon)]
zipCodeMissingLatLong = dealers$zip_codes[is.na(dealers$lat)] %>% unique()
zipCodeMissingLatLong
dealers = dealers[!is.na(dealers$lat),]
dealers$lat = add_random_offset(dealers$lat)
dealers$lon = add_random_offset(dealers$lon)
dealers$rehan[is.na(dealers$rehan)] = "Not Defined"
dealers$embossers[is.na(dealers$embossers)] = "Not Defined"
dealers$clover[is.na(dealers$clover)] = "Not Defined"
dealers$eurobraille[is.na(dealers$eurobraille)] = "Not Defined"
dealers$store_type[is.na(dealers$store_type)] = "Not Defined"
dealers$store_type_col = NA
dealers$store_type_col[dealers$store_type == "Not Defined"] = "black"
dealers$store_type_col[dealers$store_type == "store"] = "blue"
dealers$store_type_col[dealers$store_type == "satellite"] = "red"
dealers$store_type_radius= NA
dealers$store_type_radius[dealers$store_type == "Not Defined"] = 5
dealers$store_type_radius[dealers$store_type == "store"] = 7.5
dealers$store_type_radius[dealers$store_type == "satellite"] = 10
View(dealers)
runApp()
library(shiny)
library(leaflet)
library(RColorBrewer)
library(DT)
library(tidyverse)
library(readxl)
library(shinyBS)
library(zipcodeR)
library(htmltools)
library(janitor)
library(shinyWidgets)
# Function to add a small random offset to coordinates
add_random_offset <- function(coordinate) {
offset <- runif(length(coordinate), -0.001, 0.001) # Adjust the range as needed
return(coordinate + offset)
}
dms_to_decimal <- function(dms_str) {
# dms_str = df$lon
num <- parse_number(dms_str)
num[grepl("S",dms_str)] = -num[grepl("S",dms_str)]
num[grepl("W",dms_str)] = -num[grepl("W",dms_str)]
return(num)
}
getCleanData = function(df){
df = clean_names(df)
df = df[!is.na(df$dealer),]
# df$lat  = parse_number(df$lat)
# df$lon  = parse_number(df$lon)
names(df)[names(df) == "long"] = "lon"
df$lat  = dms_to_decimal(df$lat)
df$lon  = dms_to_decimal(df$lon)
# names(df)
latLong = geocode_zip(df$zip_codes)
names(latLong)[1] = "zip_codes"
names(latLong)[2] = "latitude"
names(latLong)[3] = "longitude"
latLong$zip_codes = as.numeric(latLong$zip_codes)
unique(df$zip_codes)
dealers = df %>% left_join(latLong, by = "zip_codes")
dealers$lat[is.na(dealers$lat)] = dealers$latitude[is.na(dealers$lat)]
dealers$lon[is.na(dealers$lon)] = dealers$longitude[is.na(dealers$lon)]
zipCodeMissingLatLong = dealers$zip_codes[is.na(dealers$lat)] %>% unique()
zipCodeMissingLatLong
dealers = dealers[!is.na(dealers$lat),]
dealers$lat = add_random_offset(dealers$lat)
dealers$lon = add_random_offset(dealers$lon)
dealers$rehan[is.na(dealers$rehan)] = "Not Defined"
dealers$embossers[is.na(dealers$embossers)] = "Not Defined"
dealers$clover[is.na(dealers$clover)] = "Not Defined"
dealers$eurobraille[is.na(dealers$eurobraille)] = "Not Defined"
dealers$store_type[is.na(dealers$store_type)] = "Not Defined"
dealers$store_type_col = NA
dealers$store_type_col[dealers$store_type == "Not Defined"] = "black"
dealers$store_type_col[dealers$store_type == "store"] = "blue"
dealers$store_type_col[dealers$store_type == "satellite"] = "red"
dealers$store_type_radius= NA
dealers$store_type_radius[dealers$store_type == "Not Defined"] = 5
dealers$store_type_radius[dealers$store_type == "store"] = 7.5
dealers$store_type_radius[dealers$store_type == "satellite"] = 10
dealers
}
# df = read_excel("Dealer Contacts (2).xlsx", sheet = "Dealer Territories", skip = 0)
df = read_excel("Dealer Contacts (2).xlsx", sheet = "Dealer Territories", skip = 0)
mapDf = df
names(mapDf)
df = getCleanData(df)
mapDf = df
names(mapDf)
Line0 = paste0("<b>State</b>: ", mapDf$state_1)
Line1 = paste0("<b>Store Type</b>: ", mapDf$store_type)
Line2 = paste0("<b>Dealer</b>: ", mapDf$dealer)
Line00 = paste0("<b>Dealer</b>: ", mapDf$dealer)
Line0 = paste0("<b>State</b>: ", mapDf$state_1)
Line1 = paste0("<b>Store Type</b>: ", mapDf$store_type)
Line2 = paste0("<b>Phone</b>: ", mapDf$phone)
Line3 = paste0("<b>Email</b>: ", mapDf$email)
Line4 = paste0("<b>Website</b>: ", mapDf$website)
Line5 = ifelse(is.na(mapDf$rehan),
paste0("<b><font color='red'>Rehan</font></b>: NA"),
paste0("<b><font color='green'>Rehan</font></b>: ", mapDf$rehan))
Line6 = ifelse(is.na(mapDf$embossers),
paste0("<b><font color='red'>Embossers</font></b>: NA"),
paste0("<b><font color='green'>Embossers</font></b>: ", mapDf$embossers))
Line7 = ifelse(is.na(mapDf$clover),
paste0("<b><font color='red'>Clovers</font></b>: NA"),
paste0("<b><font color='green'>Clovers</font></b>: ", mapDf$clover))
Line8 = ifelse(is.na(mapDf$eurobraille),
paste0("<b><font color='red'>Eurobraille</font></b>: NA"),
paste0("<b><font color='green'>Eurobraille</font></b>: ", mapDf$eurobraille))
Line9 = ifelse(is.na(mapDf$notes),
paste0("<b><font color='red'>Notes</font></b>: NA"),
paste0("<b><font color='blue'>Notes</font></b>: ", mapDf$notes))
pointLabels <- paste(sep = "<br/>",
Line00,
Line0,
Line1,
Line2,
Line3,
Line4,
Line5,
Line6,
Line7,
Line8,
Line9
)%>%
lapply(htmltools::HTML)
leaflet(mapDf,options = leafletOptions(zoomControl = FALSE)) %>%
addTiles() %>%
addMarkers(lng=~lon, lat=~lat,popup= pointLabels,label= pointLabels)%>%
addCircleMarkers(lng=~lon, lat=~lat,popup= pointLabels,
color = ~store_type_col,
label= pointLabels,
fill = F,
opacity = 1,
weight = 2,
radius = ~store_type_radius)
runApp()
shiny::runApp()
